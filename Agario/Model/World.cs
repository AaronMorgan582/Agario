/// <summary>
/// 
/// Author:    Aaron Morgan and Xavier Davis
/// Partner:   None
/// Date:      4/14/2020
/// Course:    CS 3500, University of Utah, School of Computing 
/// Copyright: CS 3500, Aaron Morgan and Xavier Davis
/// 
/// We, Aaron Morgan and Xavier Davis, certify that we wrote this code from scratch and did not copy it in part
/// or in whole from another source.
/// 
/// </summary>

using Microsoft.Extensions.Logging;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Model
{

    /// <summary>
    /// The class that represents the World found in the Agario game. It retains a collection
    /// of Circle objects that the Server sends to the Client.
    /// </summary>
    public class World
    {
        private const int HEIGHT = 5_000;
        private const int WIDTH = 5_000;
        private Dictionary<int, Circle> game_objects;
        private ILogger logger;

        public World(ILogger logger)
        {
            game_objects = new Dictionary<int, Circle>();
            this.logger = logger;
        }

        #region Getters for Width and Height
        public int Width { get => WIDTH; }
        public int Height { get => HEIGHT; }
        #endregion

        /// <summary>
        /// Adds the Circle object with its respective ID to the Game World.
        /// </summary>
        /// <param name="ID">The ID generated by the server</param>
        /// <param name="circle">The Circle object</param>
        public void Add(int ID, Circle circle)
        {
            logger.LogInformation($"Adding object with id: {ID}");
            game_objects.Add(ID, circle);
        }

        /// <summary>
        /// Removes a Circle object, based on the given ID.
        /// </summary>
        /// <param name="ID">The ID of the Circle that will be removed.</param>
        public void Remove(int ID)
        {
            logger.LogInformation($"Removing object with id: {ID}");
            game_objects.Remove(ID);
        }

        /// <summary>
        /// Searches the Game World for a specific Circle object. The ID must be known to find
        /// the desired Circle.
        /// </summary>
        /// <param name="ID">The ID of the Circle to be searched for.</param>
        /// <returns>A boolean: True if the Circe is located in the Game World, false if it is not.</returns>
        public bool Contains(int ID)
        {
            logger.LogInformation($"{ID} has been searched for.");
            return game_objects.ContainsKey(ID);
        }

        /// <summary>
        /// Generates an IEnumerable of the Circle IDs that are in the Game World.
        /// </summary>
        /// <returns>An IEnumerable of ints</returns>
        public IEnumerable<int> IDs()
        {
            Dictionary<int, Circle>.KeyCollection id_list = game_objects.Keys;

            return id_list;
        }

        /// <summary>
        /// Getter for a Circle, given its ID.
        /// </summary>
        /// <param name="ID">The ID of a Circle object. </param>
        /// <returns>The Circle object that is associated with the given ID.</returns>
        public Circle this[int ID]
        {
            get
            {
                if (game_objects.ContainsKey(ID))
                {
                    return game_objects[ID];
                }
                else
                {
                    throw new ArgumentException();
                }
            }

        }
    }
}
